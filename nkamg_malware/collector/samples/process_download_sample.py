#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Nankai University Information Security
#QiuKF 1055419050@qq.com
#firstly,execute file command for new samples
#secondly,concat sha256:file(key:value) csv
#thirdly,move new samples into subdirectories
#other function,find apk file from subdirectories

import pandas as pd
import zipfile
import os
from multiprocessing import Process,Pool

target_path='/data/malware/collection/'
source_path='/data/new_virusshare'
list0=[]
list1=[]
list2=[]
list3=[]
list4=[]
list5=[]
list6=[]
list7=[]
list8=[]
list9=[]
lista=[]
listb=[]
listc=[]
listd=[]
liste=[]
listf=[]
total_file_data='/data/malware/collection/Total_File_Data.csv'

def get_file_result(dir):  #download_dir !
    old_file_result=pd.read_csv(total_file_data)
    data = {"sha256":[],"type":[]}
    new_df=pd.DataFrame(data)
    file_list=os.listdir(dir)
    for each in file_list:
        exe=os.popen('file '+dir+'/'+each)
        #print 'file '+dir+'/'+each
        read_data=exe.read()
        tmp=read_data[read_data.index(':') + 2 : read_data.index('\n')]
        new_df.loc[len(new_df)]=[each,tmp]
    total=[old_file_result,new_df]
    old_file_data=pd.concat(total)
    old_file_data.to_csv('/data/malware/collection/Total_File_Data.csv',index=None) #just for test


def create_list(download_dir):
    list_dir=os.listdir(download_dir)
    list_dir=sorted(list_dir)
    
    print 'Total files: ',len(list_dir)
    for each in list_dir:
        if each[0]=='0':
            list0.append(each)
            continue
        if each[0]=='1':
            list1.append(each)
            continue
        if each[0]=='2':
            list2.append(each)
            continue
        if each[0]=='3':
            list3.append(each)
            continue
        if each[0]=='4':
            list4.append(each)
            continue
        if each[0]=='5':
            list5.append(each)
            continue
        if each[0]=='6':
            list6.append(each)
            continue
        if each[0]=='7':
            list7.append(each)
            continue
        if each[0]=='8':
            list8.append(each)
            continue
        if each[0]=='9':
            list9.append(each)
            continue
        if each[0]=='a':
            lista.append(each)
            continue
        if each[0]=='b':
            listb.append(each)
            continue
        if each[0]=='c':
            listc.append(each)
            continue
        if each[0]=='d':
            listd.append(each)
            continue
        if each[0]=='e':
            liste.append(each)
            continue
        if each[0]=='f':
            listf.append(each)
            continue


    print 'Completed distribute file list...'
def move_file(input_list,download_dir):
    count=0
    os.chdir(download_dir)
    for each in input_list:
        
        dst='mv '+each+' '+target_path+each[0]+'/'+each[1]+'/'+each[2]+'/'
        #print each,'---->',dst
        #os.popen(dst)
        count+=1
    print 'Run task  (%s)...' % (os.getpid()),'  ',count
def move(download_dir):
    p=Pool(16)
    p.apply_async(move_file,args=(list0,download_dir))
    p.apply_async(move_file,args=(list1,download_dir))
    p.apply_async(move_file,args=(list2,download_dir))
    p.apply_async(move_file,args=(list3,download_dir))
    p.apply_async(move_file,args=(list4,download_dir))
    p.apply_async(move_file,args=(list5,download_dir))
    p.apply_async(move_file,args=(list6,download_dir))
    p.apply_async(move_file,args=(list7,download_dir))
    p.apply_async(move_file,args=(list8,download_dir))
    p.apply_async(move_file,args=(list9,download_dir))
    p.apply_async(move_file,args=(lista,download_dir))
    p.apply_async(move_file,args=(listb,download_dir))
    p.apply_async(move_file,args=(listc,download_dir))
    p.apply_async(move_file,args=(listd,download_dir))
    p.apply_async(move_file,args=(liste,download_dir))
    p.apply_async(move_file,args=(listf,download_dir))
    p.close()
    p.join()
def check_new_samples(download_dir):
    file_list=os.listdir(download_dir)
    if len(file_list)==0:
        return False
    else:
        return True
def extract(zip_dir,target_dir,password=None):
    
    zip_files=os.listdir(zip_dir)
    for each in zip_files:
        f_zip=zipfile.ZipFile(zip_dir+'/'+each,'r')
        f_zip.extractall(target_dir,pwd=password)
        #print 'extracting ',each,' to ',target_dir
        exe_rm=os.popen('rm '+zip_dir+'/'+each)
        #print 'delete ',each

def sha256(extracted_dir):
    
    files=os.listdir(extracted_dir)
    for each in files:
        exe_sha256sum=os.popen('sha256sum '+extracted_dir+'/'+each)
        sha256=exe_sha256sum.read().split(' ')[0]
        
        exe_sha256sum=os.popen('mv '+extracted_dir+'/'+each+' '+extracted_dir+'/'+sha256)
        #print 'mv '+extracted_dir+'/'+each+' '+extracted_dir+'/'+sha256
        
import time
if __name__=='__main__':
    zip_dir='/data/malware/compressed_samples'                              #input the compressed samples dir
    password='infected'
    samples_dir='/data/malware/extracted_samples'  #input the download (unzip) dir
    #extract(zip_dir,samples_dir,password)

    # 1. 解压缩
    # 2. 计算SHA256
    # 3. 移动
    while True:
        #print 'try'
        if  check_new_samples(zip_dir):
            extract(zip_dir,samples_dir,password)
            sha256(samples_dir)
        if not check_new_samples(samples_dir):
            time.sleep(60)
            continue
        
        #get_file_result(samples_dir)
        create_list(samples_dir)
        move(samples_dir)
        while check_new_samples(samples_dir):
            print 'waiting for moving samples ...'
            time.sleep(60)
